--------------------------------------------------------
Database:

Survey Table:
SurveyId, Name, Type, Timestamp created, NumSystems, NumSentences, Systems
	-> 

Response Table:
Id, SurveyId, UUID, Timestamp
	--> al momento UUID == indirizzo IP del client, sarebbe da cambiare sia perché non sempre si ottiene un ip unico (bug funzionale), 
	sia perché potenzialmente è un dato privato e sensibile, e quindi soggetto a GDPR e quindi richiederebbe la gestione dei dati degli utenti,
	una liberatoria/policy per tenerli, ecc. (bug privacy). A noi interessa solo avere un id per evitare risposte multiple dallo stesso client/utente.
	
SentenceScore Table:
ResponseId, SentenceId, Score -> array of values, either best/worst or rankings or ratings.
	--> vedi esempi sotto di come rappresentare lo "score" a seconda del tipo di sistema. 
--------------------------------------------------------
General architecture:

Surveys are simple html pages (a form), which are produced by a 'backoffice' module (currently in Python).

The logic to check the form and submit data is in javascript, kept external to the survey, so it can be developed 
and maintained independently from the html.

The middle-tier or "web backend" is in php, which communicates with MySql db for storage.
The php is kept as simple as possible, almost like an API layer. 
 - postprocess.php is in fact an API taking json form as input, and returning Ok/Error
 - results.php takes a survey id and returns a very simple html table with the current results. 
	It could easily be changed to return ONLY the table or just data in json format and have a front-end page 
	do all the formatting to html.

I would like to add/tweak code to support Ranking and Rating and post examples of those.

I would also like to add a module to compute Bert score for each alternative set - 
	once an admin defines a translation as 'reference'.
	
And we need a proper Admin portion of the web with authentication separate from the public web pages.

--------------------------------------------------------
metadata:
{
	surveyId : 100,
	type : maxdiff / ranking / rating,
	clientId : uuid,
	timestamp: seconds from Unix Epoch
},
// data array, one element per sentence to score
{
	[
		{ best: 1, worst: 2},
		{ best: 1, worst: 3},
		...
		
	]
}

--------------------------------------------
for ranking: array of arrays: each array has the rank for each system.

{
	[
		[1,4,3,2],
		[2,4,3,1],
		...
		
	]
}

-----------------------------------------------
for rating: array of arrays: each array shows the rating for each system.
{
	[
		[3,4,3,5],
		[2,4,3,4],
		...
		
	]
}

---------------------------------------------------
Reporting:
/results.php?id=ID[&raw=True] 
	TODO: [&timestampLimit=X] // to limit responses received by X timestamp

	--> se il parametro 'raw' è specificato, la pagina riporta anche i record del db tali e quali, ovvero la valutazione di ogni frase, per ogni risposta. 

maxdiff: { system, votes } sorted by votes ascending, with 'worst' computed as negative votes -- we expect 2*N records, with N systems.
ranking: sort {system, votes}
rating: sort {system, votes as double} (avg. rating)

metadata: {
	"surveyId" : ID,
	"type" : type,
	"responses": total-responses
},
data : [
	"system" : votes,
	...
]


